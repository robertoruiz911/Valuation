# The following very nicely executes

  # Presents statistics
  output$table_upside <- renderDataTable({
    ticker <- paste0(toupper(input$ticker), '-US')
    
    df <- timeSeries_stock_up()
    latest <- tail(df$Close,1)
    latest <- as.numeric(latest)
    stat <- c('Last', 'Min', '-2SD', '-1SD', 'Mean', '+1SD', '+2SD', 'Max')
    val <- as.data.frame(t(c(round(latest,1),
                             round(min(df),1),
                             round(mean(df)-2*sd(df),1),
                             round(mean(df)-1*sd(df),1),
                             round(mean(df),1),
                             round(mean(df)+1*sd(df),1),
                             round(mean(df)+2*sd(df),1),
                             round(max(df),1)
                             )),
                         row.names = 'Multiple')
    #get current price, place in last
    # price <- FSquery(ticker, formula)
    price <- getPrice(ticker)
    multiple <- price / latest
    prices <- as.data.frame(t(c(round(price,2),
                                round(min(df)*multiple,2),
                                round((mean(df)-2*sd(df))*multiple,2),
                                round((mean(df)-1*sd(df))*multiple,2),
                                round(mean(df)*multiple,2),
                                round((mean(df)+1*sd(df))*multiple,2),
                                round((mean(df)+2*sd(df))*multiple,2),
                                round(max(df)*multiple,2)
                              )),
                            row.names = 'Implied Price')
                            
    val <- rbind(val, prices)
    colnames(val) <- stat
    datatable(val, filter = 'none',
              options = list(dom = 't',
                             columnDefs = list(list(className = 'dt-center',
                                               targets = 0:6))))
  })
  
  # the following needs to be adjusted to published below the above
  output$backtest_upside < - renderDataTable({
    ticker <- paste0(toupper(input$ticker), '-US')
    trailPeriods <- 20
    df <- timeSeries_stock_up()
    #df <- df[, c('date', 'Close')]

    avg <- mean(df)
    trigger1 <- avg - sd(df)
    trigger2 <- avg - 2*sd(df)

    temp <- data.frame(date = index(df), coredata(df))

    #df <- as.data.frame(df)
    temp <- temp %>%
      select(date, Close) %>%
      mutate(tma = rollmean(Close, k = trailPeriods, fill = NA, align = "right"))


    triggerDates1 <- filter(temp, tma < trigger1 & tma > trigger2)

    triggerDates1 <- triggerDates1 %>%
      mutate(under1SD=ifelse(date - lag(date, 1) < 4,1,0))
    triggerDates1[is.na(triggerDates1)] = 0
    #triggerDates1 <- triggerDates1[complete.cases(triggerDates1), ]

    changeDates1 <- triggerDates1 %>%  filter(under1SD==1 & lag(under1SD,1)==0)
    dates1 <- changeDates1$date

    triggerDates2 <- filter(temp, tma < trigger2)
    triggerDates2 <- triggerDates2 %>%
      mutate(under2SD=ifelse(date - lag(date, 1) < 4,1,0))
    triggerDates2[is.na(triggerDates2)] = 0
    changeDates2 <- triggerDates2 %>%  filter(under2SD==1 & lag(under2SD,1)==0)
    dates2 <- changeDates2$date

    headerRow <- data.frame(start='1SD', end='', Yr1='', Yr2='', Yr3='')


    SD1data <- getBacktest(df, dates1, ticker)
    SD2data <- getBacktest(df, dates2, ticker)

    # make adjustmets here....
    val <- rbind(SD1data, SD2data)
    #val <- as.data.frame(val)
    datatable(val, filter = 'none',
              options = list(dom = 't',
                             columnDefs = list(list(className = 'dt-center',
                                                    targets = 0:6))))

  })
